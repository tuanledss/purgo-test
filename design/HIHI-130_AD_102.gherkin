Feature: Encrypt PII Data in Customer 360 Table

  Background:
    Given the table "purgo_playground.customer_360_raw_clone" does not exist
    When the table "purgo_playground.customer_360_raw_clone" is created as a replica of "purgo_playground.customer_360_raw"
    Then the table "purgo_playground.customer_360_raw_clone" is ready for encryption

  Scenario: Encrypt PII columns in the customer_360_raw_clone table
    Given the PII columns "name", "email", "phone", and "zip" in the table "purgo_playground.customer_360_raw_clone"
    When the encryption method "AES-256" is applied to these columns
    Then the data in these columns is encrypted
    And the encryption key is saved as a JSON file named "encryption_key_<current_datetime>.json" in the location "/Volumes/agilisium_playground/purgo_playground/de_dq"

  Scenario Outline: Validate encryption process
    Given the encrypted column "<column_name>" in the table "purgo_playground.customer_360_raw_clone"
    When the data is decrypted using the saved encryption key
    Then the decrypted data matches the original data in the column "<column_name>" of the table "purgo_playground.customer_360_raw"

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Handle missing encryption key
    Given the encryption process is initiated
    When the encryption key cannot be generated
    Then an error message "Encryption key generation failed" is logged
    And the process is halted

  Scenario: Handle encryption failure
    Given the encryption process is running
    When an error occurs during encryption of the column "email"
    Then an error message "Encryption failed for column: email" is logged
    And the process is rolled back to maintain data integrity

  Scenario: Performance benchmark for encryption
    Given the table "purgo_playground.customer_360_raw_clone" with PII data
    When the encryption process is executed
    Then the process completes within "5 minutes"
    And the system resources are not exhausted

  Scenario: Key management and access control
    Given the encryption key is generated
    When the key is stored
    Then access is restricted to authorized personnel only
    And key rotation policy is defined as "every 90 days"