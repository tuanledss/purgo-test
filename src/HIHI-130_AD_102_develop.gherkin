Feature: Encrypt PII Data in Databricks PySpark

  Background:
    Given the table {{customer_360_raw_clone12}} does not exist
    When the table {{customer_360_raw_clone12}} is created as a replica of {{customer_360_raw12}}
    Then the table {{customer_360_raw_clone12}} is ready for encryption

  Scenario: Encrypt PII columns in the customer_360_raw_clone12 table
    Given the PII columns are "name", "email", "phone", and "zip"
    And the encryption method is AES-256
    When the PySpark script is executed to encrypt the PII columns
    Then the encrypted data is loaded into the {{customer_360_raw_clone12}} table
    And the encryption key is saved as a JSON file named encryption_key_<current_datetime> in the location {{/Volumes/agilisium_playground/purgo_playground/de_dq12}}

  Scenario Outline: Validate encryption process
    Given the column "<column_name>" is encrypted
    When the data is queried from the {{customer_360_raw_clone12}} table
    Then the "<column_name>" should not be in plain text
    And the encryption key should be retrievable from the JSON file

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Handle missing encryption key
    Given the encryption key is not generated
    When the PySpark script attempts to save the encryption key
    Then an error message "Encryption key generation failed" is displayed

  Scenario: Handle encryption failure
    Given the encryption method is AES-256
    When the PySpark script fails to encrypt the PII columns
    Then an error message "Encryption process failed for column <column_name>" is displayed

  Scenario Outline: Validate data integrity post-encryption
    Given the column "<column_name>" is encrypted
    When the data is decrypted using the encryption key
    Then the original data should match the decrypted data

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Performance benchmark for encryption
    Given the dataset size is large
    When the PySpark script is executed
    Then the encryption process should complete within the acceptable time frame of 5 minutes

