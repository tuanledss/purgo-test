Feature: Encrypt PII Data in Databricks PySpark

  Background:
    Given the table {{customer_360_raw_clone12}} does not exist
    When the table {{customer_360_raw_clone12}} is created as a replica of {{customer_360_raw12}}
    Then the table {{customer_360_raw_clone12}} is ready for encryption

  Scenario: Encrypt PII columns in the customer_360_raw_clone12 table
    Given the PII columns are "name", "email", "phone", and "zip"
    And the encryption method is AES-256
    When the PySpark script is executed to encrypt the PII columns
    Then the encrypted data is loaded into the {{customer_360_raw_clone12}} table
    And the encryption key is saved as a JSON file named encryption_key_<current_datetime> in the location {{/Volumes/agilisium_playground/purgo_playground/de_dq12}}

  Scenario Outline: Validate encryption process
    Given the column "<column_name>" is encrypted
    When the data is retrieved from the {{customer_360_raw_clone12}} table
    Then the "<column_name>" should not be in plain text
    And the data should be decryptable using the saved encryption key

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Handle error during encryption
    Given the encryption process is initiated
    When an error occurs during encryption
    Then an error message "Encryption failed for column <column_name>" is logged
    And the process is halted

  Scenario Outline: Validate data format and integrity
    Given the column "<column_name>" is encrypted
    When the data is retrieved from the {{customer_360_raw_clone12}} table
    Then the "<column_name>" should match the expected encrypted format
    And the data integrity should be maintained

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Performance benchmark for encryption
    Given the encryption process is initiated
    When the PySpark script is executed
    Then the encryption process should complete within "<time_limit>" seconds

    Examples:
      | time_limit |
      | 300        |

