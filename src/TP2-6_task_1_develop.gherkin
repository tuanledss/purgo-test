Feature: Encrypt PII Data in Databricks PySpark Script

  Background:
    Given the table {{customer_360_raw_clone12}} does not exist
    When the table {{customer_360_raw_clone12}} is created as a replica of {{customer_360_raw12}}
    Then the table {{customer_360_raw_clone12}} is ready for encryption

  Scenario: Encrypt PII columns in the customer_360_raw_clone12 table
    Given the PII columns are "name", "email", "phone", and "zip"
    And the encryption algorithm is AES-256
    When the PySpark script is executed to encrypt the PII columns
    Then the encrypted data is loaded into the {{customer_360_raw_clone12}} table
    And the encryption key is saved as a JSON file named encryption_key_<current_datetime> in the location {{/Volumes/agilisium_playground/purgo_playground/de_dq12}}

  Scenario Outline: Validate encryption process
    Given the column "<column_name>" is encrypted
    When the data is queried from the {{customer_360_raw_clone12}} table
    Then the data in "<column_name>" should not be in plain text
    And the data should be decryptable using the saved encryption key

    Examples:
      | column_name |
      | name        |
      | email       |
      | phone       |
      | zip         |

  Scenario: Handle errors during encryption
    Given the encryption process is initiated
    When an error occurs during encryption
    Then an error message "Encryption failed for column <column_name>" is logged
    And the process is halted

  Scenario: Validate JSON file creation
    Given the encryption key is generated
    When the encryption key is saved
    Then a JSON file named encryption_key_<current_datetime> should exist in the location {{/Volumes/agilisium_playground/purgo_playground/de_dq12}}
    And the JSON file should contain the encryption key in a secure format

  Scenario: Performance requirements
    Given the encryption process is running
    When the process is completed
    Then the total execution time should not exceed 5 minutes for 1 million records

  Scenario: Key management and access control
    Given the encryption key is generated
    When the key is stored
    Then access to the key should be restricted to authorized personnel only
    And the key should be rotated every 90 days

